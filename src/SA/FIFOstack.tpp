// ========================================================================== //
//                         - SORTING ALGORITHMS -                             //
//                                                                            //
// Functions for data sorting.                                                //
// ========================================================================== //
// INFO                                                                       //
// Author    : Alessandro Alaia                                               //
// Version   : v2.0                                                           //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// Constructors ============================================================= //

// -------------------------------------------------------------------------- //
template <class T>
FIFOstack<T>::FIFOstack(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// FIFOstack<T>::FIFOstack(                                                   //
//     coid)                                                                  //
//                                                                            //
// Standard constructor for FIFO stack. Initialize an empty stack             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CREATE FIFO STACK                                                          //
// ========================================================================== //

// Max stack dimensions
MAXSTK = 10;
STACK.resize(MAXSTK);

// Currenst stack size
TOPSTK = 0;

// Stack begin
BEGSTK = 0;

// Stack end
ENDSTK = 1;

return; };

// -------------------------------------------------------------------------- //
template <class T>
FIFOstack<T>::FIFOstack(
    int          maxstack
) {

// ========================================================================== //
// template <class T>                                                         //
// FIFOstack<T>::FIFOstack(                                                   //
//     int          maxstack)                                                 //
//                                                                            //
// Custom constructor #1 for FIFO stack. Initialize an empty stack with       //
// specified capacity.                                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - MAXSTK     : int, stack capacity (if exceeded resize is operated)        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CREATE LIFO STACK                                                          //
// ========================================================================== //

// Max stack dimensions
MAXSTK = maxstack;
STACK.resize(MAXSTK);

// Currenst stack size
TOPSTK = 0;

// Stack begin
BEGSTK = 0;

// Stack end
ENDSTK = 1;

return; };

// -------------------------------------------------------------------------- //
template <class T>
FIFOstack<T>::FIFOstack(
    vector<T>   &items
) {

// ========================================================================== //
// template <class T>                                                         //
// FIFOstack<T>::FIFOstack(                                                   //
//     vector<T>   &items)                                                    //
//                                                                            //
// Custom constructor #2 for FIFO stack. Initialize a stack starting from an  //
// itam list.                                                                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - items      : vector<T>, items to be put into the stack                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CREATE LIFO STACK                                                          //
// ========================================================================== //

// Max stack dimensions
MAXSTK = items.size();
STACK.resize(MAXSTK);

// Currenst stack size
TOPSTK = 0;

// Stack begin
BEGSTK = 0;

// Stack end
ENDSTK = 1;

// Put items into the stack
push(items);

return; };

// Destructors ============================================================== //

// -------------------------------------------------------------------------- //
template <class T>
FIFOstack<T>::~FIFOstack(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// FIFOstack<T>::~FIFOstack(                                                  //
//     void)                                                                  //
//                                                                            //
// Standard destructor for FIFO stack. Clear FIFO data structure.             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY LIFO STACK                                                         //
// ========================================================================== //

// Maximal stack size
MAXSTK = 0;

// Current stack dimensions
TOPSTK = 0;

// Stack begin
BEGSTK = 0;

// Stack end
ENDSTK = 0;

// Destroy items
STACK.clear();

return; };

// Methods ================================================================== //

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::IncreaseSTACK(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::IncreaseSTACK(                                          //
//     void)                                                                  //
//                                                                            //
// Increase FIFO stack size if capacity is exceeded.                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
vector<T>    dummy(MAXSTK);

// Counters
// none

// ========================================================================== //
// INSERT EMPTY POSITION IN STACK                                             //
// ========================================================================== //

// Resize stack
STACK.insert(STACK.begin() + BEGSTK, dummy.begin(), dummy.end());

// Update stack begin and end
if (BEGSTK < ENDSTK) {
    ENDSTK += MAXSTK;
}
BEGSTK += MAXSTK;

return; };

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::DecreaseSTACK(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::DecreaseSTACK(                                          //
//     void)                                                                  //
//                                                                            //
// Decrease stack size by capacity if capacity is not exceeded.               //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DECREASE STACK SIZE                                                        //
// ========================================================================== //
if (BEGSTK >= ENDSTK) {
    // cout << "case BEGSTK >= ENDSTK" << endl;
    // cout << "  BEGSTK: " << BEGSTK << ", ENDSTK " << ENDSTK << endl;
    // Scope variables
    int             n_begin = min(BEGSTK - ENDSTK, MAXSTK);

    // Remove empty positions from stack
    STACK.erase(STACK.begin() + ENDSTK, STACK.begin() + ENDSTK + n_begin);
    BEGSTK -= n_begin;
}
else {
    // cout << "case BEGSTK < ENDSTK" << endl;
    // cout << "  BEGSTK: " << BEGSTK << ", ENDSTK " << ENDSTK << endl;
    
    // Scope variables
    int             n_begin = min(BEGSTK, MAXSTK);
    int             n_end = min(MAXSTK - n_begin, ((int) STACK.size()) - ENDSTK);
    // cout << "n_beg: "<<n_begin << " n_end" << n_end << endl;
    // Remove empty positions from stack
    // cout << "  erasing from beg" << endl;
    STACK.erase(STACK.begin(), STACK.begin() + n_begin);
    // cout << "  erasing from end" << endl;
    STACK.erase(STACK.begin() + ENDSTK - n_begin, STACK.begin() + ENDSTK - n_begin + n_end);
    BEGSTK -= n_begin;
    ENDSTK -= n_begin;
    // cout << "done" << endl;

}

return; };

// -------------------------------------------------------------------------- //
template <class T>
int FIFOstack<T>::STACKempty(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// int FIFOstack<T>::STACKempty(                                              //
//     void)                                                                  //
//                                                                            //
// Returns the number of empty position in the stack                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - N      : int, number of empty position in the stack                      //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int       N;

// Counters
// none

// ========================================================================== //
// COMPUTE THE NUMBER OF EMPTY POSITION IN THE STACK                          //
// ========================================================================== //
N = STACK.size() - TOPSTK;

return(N); };

// -------------------------------------------------------------------------- //
template <class T>
T FIFOstack<T>::pop(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// T FIFOstack<T>::pop(                                                       //
//     void)                                                                  //
//                                                                            //
// Remove last element from a FIFO stack list.                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - item      : T, last element from the stack list                          //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
T       item;

// Counters
int     N;

// ========================================================================== //
// POP LAST ELEMENT FROM THE LIFO STACK                                       //
// ========================================================================== //

// Extract last element from the stack list --------------------------------- //
item = STACK[BEGSTK];
BEGSTK = (BEGSTK + 1) % STACK.size();
TOPSTK--;

// Resize stack list -------------------------------------------------------- //
N = STACKempty();
if ((N % MAXSTK == 0) && (N/MAXSTK >= 1)) {
    // cout << "downsizing" << endl;
    // cout << STACK.size() << "/" << N << "/" << TOPSTK << endl;
    DecreaseSTACK();
    // cout << STACK.size() << "/" << N << "/" << TOPSTK << endl;
}
if (TOPSTK == 0) {
    ENDSTK = (BEGSTK + 1) % STACK.size();
}

return(item); };

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::push(
    T            item
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::push(                                                   //
//     T            item)                                                     //
//                                                                            //
// Add element to a FIFO stack list.                                          //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - item      : T, element to be added to the stack list                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// PUSH ELEMENT INTO LIFO STACK                                               //
// ========================================================================== //
if (TOPSTK == 0) {
    STACK[0] = item;
    TOPSTK++;
}
else {
    // Resize stack list ---------------------------------------------------- //
    if (STACKempty() == 0) {
        IncreaseSTACK();
    }

    // Put new item into stack ---------------------------------------------- //
    STACK[ENDSTK] = item;
    ENDSTK = (ENDSTK + 1) % (STACK.size()+1);
    TOPSTK++;
}

return; };

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::push(
    vector<T>   &items
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::push(                                                   //
//     vector<T>   &items)                                                    //
//                                                                            //
// Push multiple items in a FIFO stack.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - items       : vector<T>, vector of items to be pushed into the stack     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int            n_items;

// Counters
int            i;

// ========================================================================== //
// PUSH ITEMS INTO THE STACK                                                  //
// ========================================================================== //
n_items = items.size();
for (i = 0; i < n_items; i++) {
    push(items[i]);
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::clear(
    void
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::clear(                                                  //
//     void)                                                                  //
//                                                                            //
// Clear stack content.                                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// CLEAR STACK                                                                //
// ========================================================================== //

// Resize stack
STACK.resize(MAXSTK);

// Stack dimensions
TOPSTK = 0;

// First/last items into stack
BEGSTK = 0;
ENDSTK = 1;

return; }

// -------------------------------------------------------------------------- //
template <class T>
void FIFOstack<T>::display(
    ostream     &out
) {

// ========================================================================== //
// template <class T>                                                         //
// void FIFOstack<T>::display(                                                //
//     ostream     &out)                                                      //
//                                                                            //
// Display FIFO stack content.                                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - out     : ostream, output stream                                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DISPLAY LIFO INFO                                                          //
// ========================================================================== //
out << "FIFO stack:" << endl;
out << "  n. of elements:      " << TOPSTK          << endl;
out << "  stack buffer:        " << MAXSTK          << endl;
out << "  data struct. size:   " << STACK.size()    << endl;
out << "  data begin @:        " << BEGSTK          << endl;
out << "  data ends  @:        " << ENDSTK          << endl;
if (TOPSTK > 0) {
    out << "  data:                ";
    out << "[";
    if (BEGSTK < ENDSTK) {
        for (int i = BEGSTK; i < ENDSTK-1; i++) {
            out << STACK[i] << ", ";
        } //next i
        out << STACK[ENDSTK-1] << "]" << endl;
    }
    else {
        for (int i = BEGSTK; i < STACK.size(); i++) {
            out << STACK[i] << ", ";
        } //next i
        for (int i = 0; i < ENDSTK-1; i++) {
            out << STACK[i] << ", ";
        } //next i
        out << STACK[ENDSTK-1] << "]" << endl;
    }
}
else {
    out << "[]" << endl;
}

return; }
