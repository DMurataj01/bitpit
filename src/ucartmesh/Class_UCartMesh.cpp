// ========================================================================== //
//                 - GRID MANAGER FOR CARTESIAN MESHES -                      //
//                                                                            //
// Grid manager for cartesian meshes                                          //
// ========================================================================== //
// INFO                                                                       //
// ========================================================================== //
// Author      :   Alessandro Alaia                                           //
// Version     :   v2.0                                                       //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// ========================================================================== //
// INCLUDES                                                                   //
// ========================================================================== //
# include "Class_UCartMesh.hpp"

// ========================================================================== //
// METHODS IMPLEMENTATIONS FOR Class_UCartMesh2D                              //
// ========================================================================== //

// Constructors ------------------------------------------------------------- //

// -------------------------------------------------------------------------- //
Class_UCartMesh2D::Class_UCartMesh2D(
    void
) {

// ========================================================================== //
// Class_UCartMesh2D::Class_UCartMesh2D(                                      //
//     void)                                                                  //
//                                                                            //
// Default constructor for Class_UCartMesh2D variables.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// INITIALIZE DATA STRUCTURE                                                  //
// ========================================================================== //

// Mesh extent
xlim.resize(2, 0.0);
ylim.resize(2, 0.0);

// Mesh size
nx = 0;
ny = 0;

// Mesh spacing
dx = 0.0;
dy = 0.0;

return; };

// -------------------------------------------------------------------------- //
Class_UCartMesh2D::Class_UCartMesh2D(
    dvector1D       &x,
    dvector1D       &y,
    int              n_x,
    int              n_y
) {

// ========================================================================== //
// Class_UCartMesh2D::Class_UCartMesh2D(                                      //
//     dvector1D       &x,                                                    //
//     dvector1D       &y,                                                    //
//     int              n_x,                                                  //
//     int              n_y)                                                  //
//                                                                            //
// Custom constructor for Class_UCartMesh2D variables.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - x     : dvector1D, mesh limits in the x direction                        //
// - y     : dvector1D, mesh limits in the y direction                        //
// - n_x   : int, number of cells in the x direction                          //
// - n_y   : int, number of cells in the y direction                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// SET MESH                                                                   //
// ========================================================================== //
SetMesh(x, y, n_x, n_y);

return; };

// Assignament operator ----------------------------------------------------- //
Class_UCartMesh2D& Class_UCartMesh2D::operator=(
    const Class_UCartMesh2D &B
) {

// ========================================================================== //
// Class_UCartMesh2D& Class_UCartMesh2D::operator=(                           //
//     const Class_UCartMesh2D &B)                                            //
//                                                                            //
// Assignament operator for Class_UCartMesh2D variables. Copy mesh B into     //
// *this. All data previously stored in *this are overwritten.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - B      : Class_UCartMesh2D, source cartesian mesh                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - *this  : Class_UCartMesh2D, copy of B                                    //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COPY MESH                                                                  //
// ========================================================================== //

// Parameters --------------------------------------------------------------- //

// Number of cells
nx = B.nx;
ny = B.ny;

// Mesh limits
xlim = B.xlim;
ylim = B.ylim;

// Resize mesh data structure ----------------------------------------------- //
ResizeMesh();

// Copy cell edges and cell centers ----------------------------------------- //
xnode = B.xnode;
ynode = B.ynode;
xedge = B.xedge;
yedge = B.yedge;

return(*this); };

// Destructors -------------------------------------------------------------- //

// -------------------------------------------------------------------------- //
Class_UCartMesh2D::~Class_UCartMesh2D(
    void
) {

// ========================================================================== //
//  Class_UCartMesh2D::~Class_UCartMesh2D(                                    //
//     void)                                                                  //
//                                                                            //
// Default denstructor for Class_UCartMesh2D variables.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY DATA STRUCTURE                                                     //
// ========================================================================== //

// Mesh limits
xlim.clear();
ylim.clear();

// Mesh spacing
dx = 0.0;
dy = 0.0;

// Number of mesh cells
nx = 0;
ny = 0;

// Destroy vector with cells data
xnode.clear();
ynode.clear();
xedge.clear();
yedge.clear();

return; };

// Methods ------------------------------------------------------------------ //

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::ClearMesh(
    void
) {

// ========================================================================== //
// void Class_UCartMesh2D::ClearMesh(                                         //
//     void)                                                                  //
//                                                                            //
// Destroy current mesh.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY CURRENT MESH                                                       //
// ========================================================================== //

// Mesh limits
xlim.resize(0);
ylim.resize(0);

// Number of cells
nx = 0;
ny = 0;

// Resize mesh data structure
ResizeMesh();

return; }

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::ResizeMesh(
    void
) {

// ========================================================================== //
//  void Class_UCartMesh2D::ResizeMesh(                                       //
//     void)                                                                  //
//                                                                            //
// Resize mesh data structure according to mesh dimensions                    //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE DATA STRCTURE                                                       //
// ========================================================================== //

// Cell centers
xnode.resize(nx, 0.0);
ynode.resize(ny, 0.0);

// Cell centers
xedge.resize(nx+1, 0.0);
yedge.resize(ny+1, 0.0);

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::SetMesh(
    dvector1D       &x,
    dvector1D       &y,
    int              n_x,
    int              n_y
) {

// ========================================================================== //
// void Class_UCartMesh2D::SetMesh(                                           //
//     dvector1D       &x,                                                    //
//     dvector1D       &y,                                                    //
//     int              n_x,                                                  //
//     int              n_y)                                                  //
//                                                                            //
// Generate mesh.                                                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - x     : dvector1D, mesh limits in the x direction                        //
// - y     : dvector1D, mesh limits in the y direction                        //
// - n_x   : int, number of cells in the x direction                          //
// - n_y   : int, number of cells in the y direction                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int       i;

// ========================================================================== //
// INITIALIZE MEMBERS                                                         //
// ========================================================================== //

// Set mesh parameters ------------------------------------------------------ //
// Mesh limits
xlim = x;
ylim = y;

// Number of mesh cells
nx = n_x;
ny = n_y;

// Resize mesh data structure ----------------------------------------------- //
ResizeMesh();

// Create mesh -------------------------------------------------------------- //

// Mesh spacing
if (nx > 0) {
    dx = (xlim[1] - xlim[0])/((double) nx);
}
else {
    dx = 0.0;
}
if (ny > 0) {
    dy = (ylim[1] - ylim[0])/((double) ny);
}
else {
    dy = 0.0;
}

// Cells edges
for (i = 0; i < nx+1; i++) {
    xedge[i] = xlim[0] + ((double) i) * dx;
} //next i
for (i = 0; i < ny+1; i++) {
    yedge[i] = ylim[0] + ((double) i) * dy;
} //next i

// Cells centers
for (i = 0; i < nx; i++) {
    xnode[i] = xedge[i] + 0.5 * dx;
} //next i
for (i = 0; i < ny; i++) {
    ynode[i] = yedge[i] + 0.5 * dy;
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::Translate(
    dvector1D &ds
) {

// ========================================================================== //
// void Class_UCartMesh2D::Translate(                                         //
//     dvector1D &ds)                                                         //
//                                                                            //
// Translate mesh along x, y axis.                                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - ds   : dvector1D, with displacement along each direction.                //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// TRANSLATE MESH                                                             //
// ========================================================================== //

// Mesh limits
xlim = xlim + ds[0];
ylim = ylim + ds[1];

// Cells edges
xedge = xedge + ds[0];
yedge = yedge + ds[1];

// Cells centers
xnode = xnode + ds[0];
ynode = ynode + ds[1];

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::Scale(
    dvector1D       &s
) {

// ========================================================================== //
// void Class_UCartMesh2D::Scale(                                             //
//     dvector1D       &s)                                                    //
//                                                                            //
// Scale mesh along each axis.                                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - s  : dvector1D, scaling factor along x, y directions                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int     i;

// ========================================================================== //
// RESCALE MESH                                                               //
// ========================================================================== //

// Mesh limits
xlim[1] = xlim[0] + s[0]*(xlim[1] - xlim[0]);
ylim[1] = ylim[0] + s[1]*(ylim[1] - ylim[0]);

// Mesh spacing
dx = s[0] * dx;
dy = s[1] * dy;

// Cells edges
xedge = xlim[0] + s[0] * (xedge - xlim[0]);
yedge = ylim[0] + s[1] * (yedge - ylim[0]);

// Cells centers
xnode = xlim[0] + s[0] * (xnode - xlim[0]);
ynode = ylim[0] + s[1] * (ynode - ylim[0]);

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::ReturnCellID(
    dvector1D   &P,
    int         &i,
    int         &j
) {

// ========================================================================== //
// void Class_UCartMesh2D::ReturnCellID(                                      //
//     dvector1D   &P,                                                        //
//     int         &i,                                                        //
//     int         &j)                                                        //
//                                                                            //
// Returns the cartesian indices of the cell enclosing the point P.           //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - P      : dvector1D, point x, y coordinates                               //
// - i, j   : int, cartesian indices of the cell enclosing the point P        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COMPUTE THE CELL ID                                                        //
// ========================================================================== //
i = min(nx-1, max(0, (int) floor((P[0] - xlim[0])/dx)));
j = min(ny-1, max(0, (int) floor((P[1] - ylim[0])/dy)));

return; };

// -------------------------------------------------------------------------- //
int Class_UCartMesh2D::AccessCellData(
    int          i,
    int          j
) {

// ========================================================================== //
// int Class_UCartMesh2D::AccessCellData(                                     //
//     int          i,                                                        //
//     int          j)                                                        //
//                                                                            //
// Returns the rectilinear index of a cell given its cartesian indices.       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j     : int, cell's cartesian indices                                 //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - index    : int, cell index                                               //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int     index;

// Counters
// none

// ========================================================================== //
// COMPUTE THE RECTILINEAR INDEX                                              //
// ========================================================================== //
index = ny * i + j;

return(index); };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::AccessCellData(
    int          J,
    int         &i,
    int         &j
) {

// ========================================================================== //
// void Class_UCartMesh2D::AccessCellData(                                    //
//     int          J,                                                        //
//     int         &i,                                                        //
//     int         &j)                                                        //
//                                                                            //
// Returns cartesian indices of a cell given its global index.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - J        : int, cell global index                                        //
// - i, j     : int, cell's cartesian indices                                 //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COMPUTE CARTESIAN INDICES                                                  //
// ========================================================================== //
j = J % ny;
i = J / ny;

return; };

// -------------------------------------------------------------------------- //
int Class_UCartMesh2D::AccessPointData(
    int          i,
    int          j
) {

// ========================================================================== //
// int Class_UCartMesh2D::AccessPointData(                                    //
//     int          i,                                                        //
//     int          j)                                                        //
//                                                                            //
// Returns the rectilinear index of a mesh vertex given its cartesian indices //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j   : int, cartesian indices of mesh vertex                           //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - index  : int, rectilinear index of mesh vertex                           //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int       index;

// Counters
// none

// ========================================================================== //
// COMPUTE THE RECTILINER INDEX                                               //
// ========================================================================== //
index = (ny + 1) * i + j;

return (index); };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::AccessPointData(
    int          J,
    int         &i,
    int         &j
) {

// ========================================================================== //
// void Class_UCartMesh2D::AccessPointData(                                   //
//     int          J,                                                        //
//     int         &i,                                                        //
//     int         &j)                                                        //
//                                                                            //
// Returns cartesian indices of a mesh vertex given its global index.         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - J      : int, vertex global index                                        //
// - i, j   : int, cartesian indices of mesh vertex                           //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COMPUTE CARTESIAN INDICES                                                  //
// ========================================================================== //
j = J % (ny+1);
i = J / (ny+1);

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh2D::Cart2SurfMesh(
    int         &nV,
    int         &nS,
    dvector2D   &V,
    ivector2D   &S,
    ivector3D   &A
) {

// ========================================================================== //
// void Class_UCartMesh2D::Cart2SurfMesh(                                     //
//     int         &nV,                                                       //
//     int         &nS,                                                       //
//     dvector2D   &V,                                                        //
//     ivector2D   &S,                                                        //
//     ivector3D   &A)                                                        //
//                                                                            //
// Convertes cartesian mesh into unstructured mesh.                           //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - nV         : int, number of mesh vertices                                //
// - nS         : int, number of mesh simplicies                              //
// - V          : dvector2D, coordinate vertex list. V[i][0], V[i][1], and    //
//                V[i][2] are the x, y, z coordinates of the i-th vertex.     //
// - S          : ivector2D, simplex-vertex connectivity. S[i][0], S[i][1],   //
//                and S[i][2] are the global indices of vertices of the i-th  //
//                simplex                                                     //
// - A          : ivector3D, simplex-simplex adjacencies. A[i][j] are the     //
//                global indices of simplicies adjacent to i-th simplex       //
//                along the j-th face.                                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int         nv, ns;

// Counters
int         i, j, J;

// ========================================================================== //
// RESIZE INPUT VARIABLES                                                     //
// ========================================================================== //

// Number of new vertices/simplicies
nv = (nx+1) * (ny+1);
ns = nx * ny;

// Resize vertex list
V.resize(nV + nv, dvector1D(3, 0.0));

// Resize simplex list
S.resize(nS + ns, ivector1D(3, -1));

// Resize adjacency
A.resize(nS + ns, ivector2D(4, ivector1D(1, -1)));

// ========================================================================== //
// GENERATE VERTEX LIST                                                       //
// ========================================================================== //
for (i = 0; i < nx+1; i++) {
    for (j = 0; j < ny+1; j++) {
        J = AccessPointData(i,j);
        V[J][0] = xedge[i];
        V[J][1] = yedge[j];
        V[J][2] = 0.0;
        nV++;
    } //next j
} //next i

// ========================================================================== //
// SIMPLEX-VERTEX CONNECTIVITY                                                //
// ========================================================================== //
for (i = 0; i < nx; i++) {
    for (j = 0; j < ny; j++) {
        J = AccessCellData(i,j);
        S[J][0] = AccessPointData(i,j);
        S[J][1] = AccessPointData(i+1,j);
        S[J][2] = AccessPointData(i+1,j+1);
        S[J][3] = AccessPointData(i,j+1);
    } //next j
} //next i

// ========================================================================== //
// SIMPLEX-VERTEX ADJACENCY                                                   //
// ========================================================================== //
for (i = 0; i < nx; i++) {
    for (j = 0; j < ny; j++) {
        J = AccessCellData(i,j);
        if (j == 0)     { A[J][0][0] = -1; }
        else            { A[J][0][0] = AccessCellData(i,j-1); }
        if (i == nx-1)  { A[J][1][0] = -1; }
        else            { A[J][1][0] = AccessCellData(i+1,j); }
        if (j == ny-1)  { A[J][2][0] = -1; }
        else            { A[J][2][0] = AccessCellData(i,j+1); }
        if (i == 0)     { A[J][3][0] = -1; }
        else            { A[J][3][0] = AccessCellData(i-1,j); }
    } //next j
} //next i

return; }

        // -------------------------------------------------------------------------------------- //
        void Class_UCartMesh2D::Export_vtr(string filename) {

        // ====================================================================================== //
        // void Class_UCartMesh2D::Export_vtr(string &filename)                                   //
        //                                                                                        //
        // Export mesh data in a .vtr file.                                                       //
        // ====================================================================================== //
        // INPUT                                                                                  //
        // ====================================================================================== //
        // - filename     : string, .vtr file name                                                //
        // ====================================================================================== //
        // OUTPUT                                                                                 //
        // ====================================================================================== //
        // - none                                                                                 //
        // ====================================================================================== //

        // ====================================================================================== //
        // VARIABLES DECLARATION                                                                  //
        // ====================================================================================== //

        // Local variables
        dvector1D        z(1, 0.0);
        ofstream         file_handle;

        // Counters
        // none

        // ====================================================================================== //
        // EXPORT MESH DATA                                                                       //
        // ====================================================================================== //

        // Open file
        Open_vtr(file_handle, trim(filename));

        // Export mesh data
        Write_vtrMeshData(file_handle, nx, ny, 0, xedge, yedge, z);

        // Close file
        Close_vtr(file_handle);

        return; };


// ========================================================================== //
// METHODS IMPLEMENTATIONS FOR Class_UCartMesh3D                              //
// ========================================================================== //

// Constructors ------------------------------------------------------------- //

// -------------------------------------------------------------------------- //
Class_UCartMesh3D::Class_UCartMesh3D(
    void
) {

// ========================================================================== //
// Class_UCartMesh3D::Class_UCartMesh3D(                                      //
//     void)                                                                  //
//                                                                            //
// Default constructor for Class_UCartMesh3D variables.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// INITIALIZE DATA STRUCTURE                                                  //
// ========================================================================== //

// Mesh extent
xlim.resize(2, 0.0);
ylim.resize(2, 0.0);
zlim.resize(2, 0.0);

// Mesh size
nx = 0;
ny = 0;
nz = 0;

// Mesh spacing
dx = 0.0;
dy = 0.0;
dz = 0.0;

return; };

// -------------------------------------------------------------------------- //
Class_UCartMesh3D::Class_UCartMesh3D(
    dvector1D       &x,
    dvector1D       &y,
    dvector1D       &z,
    int              n_x,
    int              n_y,
    int              n_z
) {

// ========================================================================== //
// Class_UCartMesh3D::Class_UCartMesh3D(                                      //
//     dvector1D       &x,                                                    //
//     dvector1D       &y,                                                    //
//     dvector1D       &z,                                                    //
//     int              n_x,                                                  //
//     int              n_y,                                                  //
//     int              n_z)                                                  //
//                                                                            //
// Custom constructor for Class_UCartMesh3D variables.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - x     : dvector1D, mesh limits in the x direction                        //
// - y     : dvector1D, mesh limits in the y direction                        //
// - z     : dvector1D, mesh limits in the z direction                        //
// - n_x   : int, number of cells in the x direction                          //
// - n_y   : int, number of cells in the y direction                          //
// - n_z   : int, number of cells in the z direction                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// SET MESH                                                                   //
// ========================================================================== //
SetMesh(x, y, z, n_x, n_y, n_z);

return; };

// Assignament operator ----------------------------------------------------- //
Class_UCartMesh3D& Class_UCartMesh3D::operator=(
    const Class_UCartMesh3D &B
) {

// ========================================================================== //
// Class_UCartMesh3D& Class_UCartMesh3D::operator=(                           //
//     const Class_UCartMesh3D &B)                                            //
//                                                                            //
// Assignament operator for Class_UCartMesh3D variables. Copy mesh B into     //
// *this. All data previously stored in *this are overwritten.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - B      : Class_UCartMesh3D, source cartesian mesh                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - *this  : Class_UCartMesh3D, copy of B                                    //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COPY MESH                                                                  //
// ========================================================================== //

// Parameters --------------------------------------------------------------- //

// Number of cells
nx = B.nx;
ny = B.ny;
nz = B.nz;

// Mesh limits
xlim = B.xlim;
ylim = B.ylim;
zlim = B.zlim;

// Resize mesh data structure ----------------------------------------------- //
ResizeMesh();

// Copy cell edges and cell centers ----------------------------------------- //
xnode = B.xnode;
ynode = B.ynode;
znode = B.znode;
xedge = B.xedge;
yedge = B.yedge;
zedge = B.zedge;

return(*this); };

// Destructors -------------------------------------------------------------- //

// -------------------------------------------------------------------------- //
Class_UCartMesh3D::~Class_UCartMesh3D(
    void
) {

// ========================================================================== //
//  Class_UCartMesh3D::~Class_UCartMesh3D(                                    //
//     void)                                                                  //
//                                                                            //
// Default denstructor for Class_UCartMesh3D variables.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY DATA STRUCTURE                                                     //
// ========================================================================== //

// Mesh limits
xlim.clear();
ylim.clear();
zlim.clear();

// Mesh spacing
dx = 0.0;
dy = 0.0;
dz = 0.0;

// Number of mesh cells
nx = 0;
ny = 0;
nz = 0;

// Destroy vector with cells data
xnode.clear();
ynode.clear();
znode.clear();
xedge.clear();
yedge.clear();
zedge.clear();

return; };

// Methods ------------------------------------------------------------------ //

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::ClearMesh(
    void
) {

// ========================================================================== //
// void Class_UCartMesh3D::ClearMesh(                                         //
//     void)                                                                  //
//                                                                            //
// Destroy current mesh.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// DESTROY CURRENT MESH                                                       //
// ========================================================================== //

// Mesh limits
xlim.resize(0);
ylim.resize(0);
zlim.resize(0);

// Number of cells
nx = 0;
ny = 0;
nz = 0;

// Resize mesh data structure
ResizeMesh();

return; }

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::ResizeMesh(
    void
) {

// ========================================================================== //
//  void Class_UCartMesh3D::ResizeMesh(                                       //
//     void)                                                                  //
//                                                                            //
// Resize mesh data structure according to mesh dimensions                    //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// RESIZE DATA STRCTURE                                                       //
// ========================================================================== //

// Cell centers
xnode.resize(nx, 0.0);
ynode.resize(ny, 0.0);
znode.resize(nz, 0.0);

// Cell centers
xedge.resize(nx+1, 0.0);
yedge.resize(ny+1, 0.0);
zedge.resize(nz+1, 0.0);

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::SetMesh(
    dvector1D       &x,
    dvector1D       &y,
    dvector1D       &z,
    int              n_x,
    int              n_y,
    int              n_z
) {

// ========================================================================== //
// void Class_UCartMesh3D::SetMesh(                                           //
//     dvector1D       &x,                                                    //
//     dvector1D       &y,                                                    //
//     dvector1D       &z,                                                    //
//     int              n_x,                                                  //
//     int              n_y,                                                  //
//     int              n_z)                                                  //
//                                                                            //
// Generate mesh.                                                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - x     : dvector1D, mesh limits in the x direction                        //
// - y     : dvector1D, mesh limits in the y direction                        //
// - z     : dvector1D, mesh limits in the z direction                        //
// - n_x   : int, number of cells in the x direction                          //
// - n_y   : int, number of cells in the y direction                          //
// - n_z   : int, number of cells in the z direction                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int       i;

// ========================================================================== //
// INITIALIZE MEMBERS                                                         //
// ========================================================================== //

// Set mesh parameters ------------------------------------------------------ //
// Mesh limits
xlim = x;
ylim = y;
zlim = z;

// Number of mesh cells
nx = n_x;
ny = n_y;
nz = n_z;

// Resize mesh data structure ----------------------------------------------- //
ResizeMesh();

// Create mesh -------------------------------------------------------------- //

// Mesh spacing
if (nx > 0) {
    dx = (xlim[1] - xlim[0])/((double) nx);
}
else {
    dx = 0.0;
}
if (ny > 0) {
    dy = (ylim[1] - ylim[0])/((double) ny);
}
else {
    dy = 0.0;
}
if (nz > 0) {
    dz = (zlim[1] - zlim[0])/((double) nz);
}
else {
    dz = 0.0;
}


// Cells edges
for (i = 0; i < nx+1; i++) {
    xedge[i] = xlim[0] + ((double) i) * dx;
} //next i
for (i = 0; i < ny+1; i++) {
    yedge[i] = ylim[0] + ((double) i) * dy;
} //next i
for (i = 0; i < nz+1; i++) {
    zedge[i] = zlim[0] + ((double) i) * dz;
} //next i

// Cells centers
for (i = 0; i < nx; i++) {
    xnode[i] = xedge[i] + 0.5 * dx;
} //next i
for (i = 0; i < ny; i++) {
    ynode[i] = yedge[i] + 0.5 * dy;
} //next i
for (i = 0; i < nz; i++) {
    znode[i] = zedge[i] + 0.5 * dz;
} //next i

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::Translate(
    dvector1D &ds
) {

// ========================================================================== //
// void Class_UCartMesh3D::Translate(                                         //
//     dvector1D &ds)                                                         //
//                                                                            //
// Translate mesh along x, y, z axis.                                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - ds   : dvector1D, with displacement along each direction.                //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// TRANSLATE MESH                                                             //
// ========================================================================== //

// Mesh limits
xlim = xlim + ds[0];
ylim = ylim + ds[1];
zlim = zlim + ds[2];

// Cells edges
xedge = xedge + ds[0];
yedge = yedge + ds[1];
zedge = zedge + ds[2];

// Cells centers
xnode = xnode + ds[0];
ynode = ynode + ds[1];
znode = znode + ds[2];

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::Scale(
    dvector1D       &s
) {

// ========================================================================== //
// void Class_UCartMesh3D::Scale(                                             //
//     dvector1D       &s)                                                    //
//                                                                            //
// Scale mesh along each axis.                                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - s  : dvector1D, scaling factor along x, y, z directions                  //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int     i;

// ========================================================================== //
// RESCALE MESH                                                               //
// ========================================================================== //

// Mesh limits
xlim[1] = xlim[0] + s[0]*(xlim[1] - xlim[0]);
ylim[1] = ylim[0] + s[1]*(ylim[1] - ylim[0]);
zlim[1] = zlim[0] + s[2]*(zlim[1] - zlim[0]);

// Mesh spacing
dx = s[0] * dx;
dy = s[1] * dy;
dz = s[2] * dz;

// Cells edges
xedge = xlim[0] + s[0] * (xedge - xlim[0]);
yedge = ylim[0] + s[1] * (yedge - ylim[0]);
zedge = zlim[0] + s[2] * (zedge - zlim[0]);

// Cells centers
xnode = xlim[0] + s[0] * (xnode - xlim[0]);
ynode = ylim[0] + s[1] * (ynode - ylim[0]);
znode = zlim[0] + s[2] * (znode - zlim[0]);

return; };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::ReturnCellID(
    dvector1D   &P,
    int         &i,
    int         &j,
    int         &k
) {

// ========================================================================== //
// void Class_UCartMesh3D::ReturnCellID(                                      //
//     dvector1D   &P,                                                        //
//     int         &i,                                                        //
//     int         &j,                                                        //
//     int         &k)                                                        //
//                                                                            //
// Returns the cartesian indices of the cell enclosing the point P.           //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - P       : dvector1D, point x, y, z coordinates                           //
// - i, j, k : int, cartesian indices of the cell enclosing the point P       //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
// none

// ========================================================================== //
// COMPUTE THE CELL ID                                                        //
// ========================================================================== //
i = min(nx-1, max(0, (int) floor((P[0] - xlim[0])/dx)));
j = min(ny-1, max(0, (int) floor((P[1] - ylim[0])/dy)));
k = min(nz-1, max(0, (int) floor((P[2] - zlim[0])/dz)));

return; };

// -------------------------------------------------------------------------- //
int Class_UCartMesh3D::AccessCellData(
    int          i,
    int          j,
    int          k
) {

// ========================================================================== //
// int Class_UCartMesh3D::AccessCellData(                                     //
//     int          i,                                                        //
//     int          j,                                                        //
//     int          k)                                                        //
//                                                                            //
// Returns the rectilinear index of a cell given its cartesian indices.       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j, k  : int, cell's cartesian indices                                 //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - index    : int, cell index                                               //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int     index;

// Counters
// none

// ========================================================================== //
// COMPUTE THE RECTILINEAR INDEX                                              //
// ========================================================================== //
index = ny * nz * i + nz * j + k;

return(index); };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::AccessCellData(
    int          J,
    int         &i,
    int         &j,
    int         &k
) {

// ========================================================================== //
// void Class_UCartMesh3D::AccessCellData(                                    //
//     int          J,                                                        //
//     int         &i,                                                        //
//     int         &j,                                                        //
//     int         &k)                                                        //
//                                                                            //
// Returns cartesian indices of a cell given its global index.                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - J        : int, cell global index                                        //
// - i, j, k  : int, cell's cartesian indices                                 //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int     index;

// Counters
// none

// ========================================================================== //
// COMPUTE THE CARTESIAN INDICES                                              //
// ========================================================================== //
k = J % nz;
index = J / nz;
j = index % ny;
i = index / ny;

return; };

// -------------------------------------------------------------------------- //
int Class_UCartMesh3D::AccessPointData(
    int          i,
    int          j,
    int          k
) {

// ========================================================================== //
// int Class_UCartMesh3D::AccessPointData(                                    //
//     int          i,                                                        //
//     int          j,                                                        //
//     int          k)                                                        //
//                                                                            //
// Returns the rectilinear index of a mesh vertex given its cartesian indices //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j, k : int, cartesian indices of mesh vertex                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - index   : int, rectilinear index of mesh vertex                          //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int       index;

// Counters
// none

// ========================================================================== //
// COMPUTE THE RECTILINER INDEX                                               //
// ========================================================================== //
index = (ny+1) * (nz+1) * i + (nz+1) * j + k;

return (index); };

// -------------------------------------------------------------------------- //
void Class_UCartMesh3D::AccessPointData(
    int          J,
    int         &i,
    int         &j,
    int         &k
) {

// ========================================================================== //
// void Class_UCartMesh3D::AccessPointData(                                   //
//     int          J,                                                        //
//     int         &i,                                                        //
//     int         &j,                                                        //
//     int         &k)                                                        //
//                                                                            //
// Returns cartesian indices of a mesh vertex given its global index.         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - J       : int, vertex global index                                       //
// - i, j, k : int, cartesian indices of mesh vertex                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int       index;

// Counters
// none

// ========================================================================== //
// COMPUTE CARTESIAN INDICES                                                  //
// ========================================================================== //
k = J % (nz+1);
index = J / (nz+1);
j = index % (ny+1);
i = index / (ny+1);

return; };

        // -------------------------------------------------------------------------------------- //
        void Class_UCartMesh3D::Export_vtr(string filename) {

        // ====================================================================================== //
        // void Class_UCartMesh3D::Export_vtr(string &filename)                                   //
        //                                                                                        //
        // Export mesh data in a .vtr file.                                                       //
        // ====================================================================================== //
        // INPUT                                                                                  //
        // ====================================================================================== //
        // - filename     : string, .vtr file name                                                //
        // ====================================================================================== //
        // OUTPUT                                                                                 //
        // ====================================================================================== //
        // - none                                                                                 //
        // ====================================================================================== //

        // ====================================================================================== //
        // VARIABLES DECLARATION                                                                  //
        // ====================================================================================== //

        // Local variables
        ofstream         file_handle;

        // Counters
        // none

        // ====================================================================================== //
        // EXPORT MESH DATA                                                                       //
        // ====================================================================================== //

        // Open file
        Open_vtr(file_handle, trim(filename));

        // Export mesh data
        Write_vtrMeshData(file_handle, nx, ny, nz, xedge, yedge, yedge);

        // Close file
        Close_vtr(file_handle);

        return; };
