// ========================================================================== //
//                         LINEAR ALGEBRA PACKAGE                             //
//                                                                            //
// Functions for basic linear algebra computations.                           //
// ========================================================================== //
// INFO                                                                       //
// ========================================================================== //
// Author            : Alessandro Alaia                                       //
// Data              : Sept 26, 2014                                          //
// Version           : v2.0                                                   //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// ========================================================================== //
// INCLUDES                                                                   //
// ========================================================================== //
# include "LinearAlgebra.hpp"

// ========================================================================== //
// IMPLEMENTATIONS                                                            //
// ========================================================================== //

// -------------------------------------------------------------------------- //
unsigned int LU(
    dvector2D                       &A,
    dvector2D                       &L,
    dvector2D                       &U,
    dvector2D                       *P
) {

// ========================================================================== //
// unsigned int LU(                                                           //
//     dvector2D                       &A,                                    //
//     dvector2D                       &L,                                    //
//     dvector2D                       &U,                                    //
//     dvector2D                       *P)                                    //
//                                                                            //
// Compute the LU factorization of a given matrix.                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A         : dvector2D, coeff. matrix                                     //
// - L, U      : dvector2D, LU factorization                                  //
// - P         : (optional) ivector2D, with permutation matrix                //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - info      : int, info flag.                                              //
//               info = 0   --->  no errors encounterd                        //
//               info = 1   --->  matrix is ill-conditioned                   //
//               info = 2   --->  matrix is singular to working precision     //
//               info = 3   --->  input data are not coherent                 //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Parameters
double            toll_pivot = 1.0e-8;

// Local variables
int               info = 0;
int               m, n, pivot_row;
double            pivot, pivot_trial;
dvector2D         AA;

// Counter
int               i, j, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return(3); };
n = A[0].size();
if (m != n) {
    return (3);
}

// ========================================================================== //
// RESIZE INPUT VARIABLES                                                     //
// ========================================================================== //

// LU matrices
zeros(L, n, n);
zeros(U, n, n);

// Backup copy of coeffs. matrix
AA = A;

// Pivoting array
eye(*P, n, n);

// ========================================================================== //
// COMPUTE LU FACTORIZATION                                                   //
// ========================================================================== //
for (k = 0; k < n; k++) {
    L[k][k] = 1.0;

    // Pivoting ------------------------------------------------------------- //
    pivot_row = k;
    pivot = abs(AA[k][k]);
    for (i = k+1; i < n; i++) {
        pivot_trial = abs(AA[i][k]);
        if (pivot_trial > pivot) {
            pivot = pivot_trial;
            pivot_row = i;
        }
    } //next i

    // Perform rows permutation --------------------------------------------- //
    if (pivot_row == k) {
        if (pivot < 1.0e-14) {
            info = 2;
            return(info);
        }
        else if ((pivot >= 1.0e-14) && (pivot < toll_pivot)) {
            info = 1;
        }
    }
    else {
        swap(AA[k], AA[pivot_row]);
        if (P != NULL) {
            swap((*P)[k], (*P)[pivot_row]);
        }
    }

    // Gauss elimination ---------------------------------------------------- //
    for (i = k+1; i < n; i++) {
        L[i][k] = AA[i][k]/AA[k][k] ;
        for (j = k+1; j < n; j++) {
            AA[i][j] = AA[i][j] - L[i][k]*AA[k][j];
        } //next j

    } //next i
    for (j = k; j < n; j++) {
        U[k][j] = AA[k][j];
    } //next j
} //next k

return(info); };

// -------------------------------------------------------------------------- //
void BackwardSubst(
    dvector2D                       &A,
    dvector1D                       &B,
    dvector1D                       &x
) {

// ========================================================================== //
// void BackwardSubst(                                                        //
//     dvector2D                       &A,                                    //
//     dvector1D                       &B,                                    //
//     dvector1D                       &x)                                    //
//                                                                            //
// Backward substitution method. Solve a linear system Ax = b with upper      //
// triangular coeffs. matrix.                                                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A     : dvector2D, coeff.s matrix                                        //
// - B     : dvector1D, source term                                           //
// - x     : dvector1D, solution of the linear system                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int    m, n, l;
double sum, d;

// Counter
int    i, p;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return; };
n = A[0].size();
if (m != n) {
    return;
}
l = B.size();
if (l == 0) { return; };
if (l != n) {
    return;
}

// ========================================================================== //
// CHECK SOLVABILITY CONDITION                                                //
// ========================================================================== //
d = 1.0;
for (i = 0; i < n; i++) {
    d = d*A[i][i];
} //next i
if (abs(d) < 1.0e-14) {
    return;
}

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
x.resize(n, 0.0);

// ========================================================================== //
// SOLVE LINEAR SYSTEM WITH BACKWARD SUBSTITUTION                             //
// ========================================================================== //
for (i = n-1; i >= 0; i--) {
    sum = 0.0;
    for(p = n-1; p > i; p--) {
        sum += A[i][p]*x[p];
    } //next p
    x[i] = (B[i] - sum)/A[i][i];
} //next i

return; };

// -------------------------------------------------------------------------- //
void ForwardSubst(
    dvector2D                       &A,
    dvector1D                       &B,
    dvector1D                       &x
) {

// ========================================================================== //
// void Forward(                                                              //
//     dvector2D                       &A,                                    //
//     dvector1D                       &B,                                    //
//     dvector1D                       &x)                                    //
//                                                                            //
// Forward substitution method. Solve a linear system Ax = B with lower       //
// triangular coeffs.                                                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : dvector2D, lower triangular coeffs. matrix                      //
// - B      : dvector1D, source term.                                         //
// - x      : dvector1D, solution of the linear system                        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int        m, n, l;
double     d, sum;

// Counters
int        i, p;


// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return; };
n = A[0].size();
if (m != n) {
    return;
}
l = B.size();
if (l == 0) { return; };
if (l != n) {
    return;
}

// ========================================================================== //
// CHECK SOLVABILITY CONDITION                                                //
// ========================================================================== //
d = 1.0;
for (i = 0; i < n; i++) {
    d = d*A[i][i];
} //next i
if (abs(d) < 1.0e-14) {
    return;
}

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
x.resize(n, 0.0);

// ========================================================================== //
// FORWARD SUBSTITUTION                                                       //
// ========================================================================== //
for(i = 0; i < n; i++) {
    sum = 0.0;
    for(p = 0; p < i; p++) {
        sum += A[i][p] * x[p];
    } //next p
    x[i] = (B[i] - sum)/A[i][i];
} //next i

return; };

// -------------------------------------------------------------------------- //
void SolveLU(
    dvector2D                       &A,
    dvector1D                       &B,
    dvector1D                       &x
) {

// ========================================================================== //
// void SolveLU(                                                              //
//     dvector2D                       &A,                                    //
//     dvector1D                       &B,                                    //
//     dvector1D                       &x)                                    //
//                                                                            //
// Solve liner system Ax = B, using LU factorization.                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A        : dvector2D, with coeffs. matrix                                //
// - B        : dvector1D, with source term                                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - x        : dvector1D, with solution to the linear system                 //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int    info;
dvector2D       L, U, P, *P_ = &P;
dvector1D       z, C;

// Counters
// none

// ========================================================================== //
// COMPUTE LU FACTORIZATION                                                   //
// ========================================================================== //
info = LU(A, L, U, P_);
if ((info == 2) || (info == 3)) {
    return;
}
matmul(P, B, C);

// ========================================================================== //
//  SOLVE THE LINEAR SYSTEM                                                   //
// ========================================================================== //

// Forward substitution
ForwardSubst(L, C, z);

// Bacward substitution
BackwardSubst(U, z, x);

return; };


