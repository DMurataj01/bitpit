// ========================================================================== //
//                         LINEAR ALGEBRA PACKAGE                             //
//                                                                            //
// Functions for basic linear algebra computations.                           //
// ========================================================================== //
// INFO                                                                       //
// ========================================================================== //
// Author            : Alessandro Alaia                                       //
// Data              : Sept 26, 2014                                          //
// Version           : v2.0                                                   //
//                                                                            //
// All rights reserved.                                                       //
// ========================================================================== //

// ========================================================================== //
// INCLUDES                                                                   //
// ========================================================================== //
# include "LinearAlgebra.hpp"

// ========================================================================== //
// TEMPLATES                                                                  //
// ========================================================================== //

// Generic routines ========================================================= //

// -------------------------------------------------------------------------- //
template<class T>
void display_matrix(
    ostream                     &out,
    vector< vector< T > >       &A
) {

// ========================================================================== //
// template<class T, size_t n, size_t m>                                      //
// void display_matrix(                                                       //
//     ostream                     &out,                                      //
//     vector< vector< T > >       &A)                                        //
//                                                                            //
// Display matrix content in a nicely formatted output.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - out   : ostream, ref. to output stream                                   //
// - A     : vector<vector<T > >, matrix to be displayed                      //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int             m = A.size();

// Counters
int             i;

// ========================================================================== //
// DISPLAY MATRIX CONTENT                                                     //
// ========================================================================== //
for (i = 0; i < m; ++i) {
    out << A[i] << endl;
} //next i

return; };

// -------------------------------------------------------------------------- //
template<class T, size_t m, size_t n>
void display_matrix(
    ostream                     &out,
    array<array<T, n>, m>       &A
) {

// ========================================================================== //
// template<class T, size_t m, size_t n>                                      //
// void display_matrix(                                                       //
//     ostream                     &out,                                      //
//     array<array<T, n>, m>       &A)                                        //
//                                                                            //
// Display matrix content in a nicely formatted output.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - out   : ostream, ref. to output stream                                   //
// - A     : array<array<T, n>, m>, matrix to be displayed                    //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int             i;

// ========================================================================== //
// DISPLAY MATRIX CONTENT                                                     //
// ========================================================================== //
for (i = 0; i < m; ++i) {
    out << A[i] << endl;
} //next i

return; };

// Matrix basic templates =================================================== //

// -------------------------------------------------------------------------- //
template <class T>
void zeros(
    vector< vector < T > >      &A,
    int                          m,
    int                          n
) {

// ========================================================================== //
// template <class T>                                                         //
// void zeros(                                                                //
//     vector< vector < T > >      &A,                                        //
//     int                          m,                                        //
//     int                          n)                                        //
//                                                                            //
// Initialize a m-by-n matrix of zeros.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector< T > >, with m-by-n matrix of zeros              //
// - m      : int, number of rows                                             //
// - n      : int, number of columns                                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int      i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    return;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
A.resize(m);
for (i = 0; i < m; i++) {
    A[i].resize(n, (T) 0.0);
    for (j = 0; j < n; j++) {
        A[i][j] = (T) 0.0;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void zeros(
    array< array < T, n >, m >  &A
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void zeros(                                                                //
//     array< array < T, n >, m >  &A)                                        //
//                                                                            //
// Initialize a m-by-n matrix of zeros.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array< T, n >, m >, with m-by-n matrix of zeros          //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int      i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    return;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
for (i = 0; i < m; i++) {
    A[i].fill(0.0);
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
void ones(
    vector< vector < T > >      &A,
    int                          m,
    int                          n
) {

// ========================================================================== //
// template <class T>                                                         //
// void ones(                                                                 //
//     vector< vector < T > >      &A,                                        //
//     int                          m,                                        //
//     int                          n)                                        //
//                                                                            //
// Initialize a m-by-n matrix of ones.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector< T > >, with m-by-n matrix of ones               //
// - m      : int, number of rows                                             //
// - n      : int, number of columns                                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int      i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    cout << "ERROR: number of rows (columns) must be > 0!!" << endl;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
A.resize(m);
for (i = 0; i < m; i++) {
    A[i].resize(n, (T) 1.0);
    for (j = 0; j < n; j++) {
        A[i][j] = (T) 1.0;
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void ones(
    array< array < T, n >, m >  &A
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void ones(                                                                 //
//     array< array < T, n >, m >  &A)                                        //
//                                                                            //
// Initialize a m-by-n matrix of ones.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array< T, n >, m >, with m-by-n matrix of ones           //
// - none                                                                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int      i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    return;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
for (i = 0; i < m; i++) {
    A[i].fill(1.0);
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
void eye(
    vector< vector < T > >      &A,
    int                          m,
    int                          n
) {

// ========================================================================== //
// template <class T>                                                         //
// void eye(                                                                  //
//     vector< vector < T > >      &A,                                        //
//     int                          m,                                        //
//     int                          n)                                        //
//                                                                            //
// Initialize a m-by-n identity matrix.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector< T > >, with m-by-n identity matrix              //
// - m      : int, number of rows                                             //
// - n      : int, number of columns                                          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int      s = min(m, n);

// Counters
int      i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    return;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
zeros(A, m, n);
for (i = 0; i < s; i++) {
    A[i][i] = (T) 1.0;
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void eye(
    array< array < T, n >, m >  &A
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void eye(                                                                  //
//     array< array < T, n >, m >  &A)                                        //
//                                                                            //
// Initialize a m-by-n identity matrix.                                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array< T, n >, m >, with m-by-n identity matrix          //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int      s = min(m, n);

// Counters
int      i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if ((m == 0) || (n == 0)) {
    return;
}

// ========================================================================== //
// CREATE MATRIX                                                              //
// ========================================================================== //
zeros(A);
for (i = 0; i < s; i++) {
    A[i][i] = (T) 1.0;
} //next i

return; };

// Matrix multiplications =================================================== //

// -------------------------------------------------------------------------- //
template <class T>
void matmul(
    T                            A,
    vector< vector< T > >       &B,
    vector< vector< T > >       &C
) {

// ========================================================================== //
// template <class T>                                                         //
// void matmul(                                                               //
//     T                            A,                                        //
//     vector< vector< T > >       &B,                                        //
//     vector< vector< T > >       &C)                                        //
//                                                                            //
// Perform product between scalar A and matrix B.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : T, 1st input scalar                                             //
// - B      : vector< vector < T > >, 2nd input matrix                        //
// - C      : vector< vector < T > >, with product between A and B            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
int          m, n;

// Counters
int          i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Matrix
m = B.size();
if (m == 0) {
    return;
}
n = B[0].size();
if (n == 0) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //

// Resize output variable
C.resize(m);

// Perform product
for (i = 0; i < m; i++) {
    C[i].resize(n, (T) 0.0);
    for (j = 0; j < n; j++) {
        C[i][j] = A * B[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void matmul(
    T                            A,
    array< array< T, n >, m >   &B,
    array< array< T, n >, m >   &C
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void matmul(                                                               //
//     T                            A,                                        //
//     array< array< T, n >, m >   &B,                                        //
//     array< array< T, n >, m >   &C)                                        //
//                                                                            //
// Perform product between scalar A and matrix B.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : T, 1st input scalar                                             //
// - B      : array< array < T, n >, m >, 2nd input matrix                    //
// - C      : array< array < T, n >, m >, with product between A and B        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
// none

// Counters
int          i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Matrix
if (m == 0) {
    return;
}
if (n == 0) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
        C[i][j] = A * B[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
void matmul(
    vector< vector< T > >       &B,
    T                            A,
    vector< vector< T > >       &C
) {

// ========================================================================== //
// template <class T>                                                         //
// void matmul(                                                               //
//     vector< vector< T > >       &B,                                        //
//     T                            A,                                        //
//     vector< vector< T > >       &C)                                        //
//                                                                            //
// Perform product between scalar A and matrix B.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - B      : vector< vector < T > >, 1st input matrix                        //
// - A      : T, 2nd input scalar                                             //
// - C      : vector< vector < T > >, with product between A and B            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
int          m, n;

// Counters
int          i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Matrix
m = B.size();
if (m == 0) {
    return;
}
n = B[0].size();
if (n == 0) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //
matmul(A, B, C);

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void matmul(
    array< array< T, n >, m >   &B,
    T                            A,
    array< array< T, n >, m >   &C
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void matmul(                                                               //
//     array< array< T, n >, m >   &B,                                        //
//     T                            A,                                        //
//     array< array< T, n >, m >   &C)                                        //
//                                                                            //
// Perform product between scalar A and matrix B.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - B      : array< array < T, n >, m >, 1st input matrix                    //
// - A      : T, 2nd input scalar                                             //
// - C      : array< array < T, n >, m >, with product between A and B        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
// none

// Counters
int          i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Matrix
if (m == 0) {
    return;
}
if (n == 0) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //
matmul(A, B, C);

return; };

// -------------------------------------------------------------------------- //
template <class T>
void matmul(
    vector< T >                &A,
    vector< vector < T > >     &B,
    vector< T >                &C
) {

// ========================================================================== //
// template <class T>                                                         //
// void matmul(                                                               //
//     vector< T >                &A,                                         //
//     vector< vector < T > >     &B,                                         //
//     vector< T >                &C)                                         //
//                                                                            //
// Matrix left-product between a matrix and a vector.                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< T >, vector                                             //
// - B      : vector< vector < T > >, m-by-n matrix                           //
// - C      : vector< T >, output vector                                      //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int           l, m, n;

// Counters
int           i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Input vector
l = A.size();
if (l == 0) {
    return;
}

// Input matrix
m = B.size();
if (m == 0) {
    return;
}
n = B[0].size();
if (n == 0) {
    return;
}

// Check dimensions coherency
if (l != m) {
    return;
}

// ========================================================================== //
// COMPUTE THE MATRIX PRODUCT                                                 //
// ========================================================================== //

// Resize vector
C.resize(n, 0.0);

// Compute matrix product
for (i = 0; i < n; i++) {
    C[i] = 0.0;
    for (j = 0; j < m; j++) {
        C[i] += A[j]*B[j][i];
    } //next j
} //next i

return; }

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void matmul(
    array< T, m >              &A,
    array< array < T, n >, m > &B,
    array< T, n >              &C
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void matmul(                                                               //
//     array< T, m >              &A,                                         //
//     array< array < T, n >, m > &B,                                         //
//     array< T, n >              &C)                                         //
//                                                                            //
// Matrix left-product between a matrix and a vector.                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< T, m >, vector                                           //
// - B      : array< array < T, n >, m >, m-by-n matrix                       //
// - C      : vector< T, n >, output vector                                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int           i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Input matrix
if (m == 0) {
    return;
}
if (n == 0) {
    return;
}

// ========================================================================== //
// COMPUTE THE MATRIX PRODUCT                                                 //
// ========================================================================== //
for (i = 0; i < n; i++) {
    C[i] = 0.0;
    for (j = 0; j < m; j++) {
        C[i] += A[j]*B[j][i];
    } //next j
} //next i

return; }

// -------------------------------------------------------------------------- //
template <class T>
void matmul(
    vector< vector < T > >      &A,
    vector< T >                 &B,
    vector< T >                 &C
) {

// ========================================================================== //
// template <class T>                                                         //
// void matmul(                                                               //
//     vector< vector < T > >      &A,                                        //
//     vector< T >                 &B,                                        //
//     vector< T >                 &C)                                        //
//                                                                            //
// Matrix rught-product between a matrix and a vector.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector < T > >, m-by-n matrix                           //
// - B      : vector< T >, vector                                             //
// - C      : vector< T >, output vector                                      //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int           l, m, n;

// Counters
int           i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Input vector
l = B.size();
if (l == 0) {
    return;
}

// Input matrix
m = A.size();
if (m == 0) {
    return;
}
n = A[0].size();
if (n == 0) {
    return;
}

// Check dimensions coherency
if (l != n) {
    return;
}

// ========================================================================== //
// COMPUTE THE MATRIX PRODUCT                                                 //
// ========================================================================== //

// Resize vector
C.resize(m, 0.0);

// Compute matrix product
for (i = 0; i < m; i++) {
    C[i] = 0.0;
    for (j = 0; j < n; j++) {
        C[i] += B[j]*A[i][j];
    } //next j
} //next i

return; }

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void matmul(
    array< array < T, n >, m >  &A,
    array< T, n >               &B,
    array< T, m >               &C
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void matmul(                                                               //
//     array< array < T, n >, m >  &A,                                        //
//     array< T, n >               &B,                                        //
//     array< T, m >               &C)                                        //
//                                                                            //
// Matrix rught-product between a matrix and a vector.                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array < T, n >, m >, m-by-n matrix                       //
// - B      : array< T, n >, vector                                           //
// - C      : array< T, m >, output vector                                    //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int           i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// Input matrix
if (m == 0) {
    return;
}
if (n == 0) {
    return;
}

// ========================================================================== //
// COMPUTE THE MATRIX PRODUCT                                                 //
// ========================================================================== //
for (i = 0; i < m; i++) {
    C[i] = 0.0;
    for (j = 0; j < n; j++) {
        C[i] += B[j]*A[i][j];
    } //next j
} //next i

return; }

// -------------------------------------------------------------------------- //
template <class T>
void matmul(
    vector< vector< T > >       &A,
    vector< vector< T > >       &B,
    vector< vector< T > >       &C
) {

// ========================================================================== //
// template <class T>                                                         //
// void matmul(                                                               //
//     vector< vector< T > >       &A,                                        //
//     vector< vector< T > >       &B,                                        //
//     vector< vector< T > >       &C)                                        //
//                                                                            //
// Perform row-column product between matrices A and B.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector < T > >, 1st input matrix                        //
// - B      : vector< vector < T > >, 2nd input matrix                        //
// - C      : vector< vector < T > >, with product between A and B            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
int          m1, n1, n2, m2;

// Counters
int          i, j, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// 1st matrix
m1 = A.size();
if (m1 == 0) {
    return;
}
n1 = A[0].size();
if (n1 == 0) {
    return;
}

// 2nd matrix
m2 = B.size();
if (m2 == 0) {
    return;
}
n2 = B[0].size();
if (n2 == 0) {
    return;
}

// Check dimensions coherency
if (n1 != m2) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //

// Resiz output variable
C.resize(m1);

for (i = 0; i < m1; i++) {
    C[i].resize(n2, (T) 0.0);
    for (j = 0; j < n2; j++) {
        C[i][j] = (T) 0.0;
        for (k = 0; k < n1; k++) {
            C[i][j] += A[i][k] * B[k][j];
        } //next k
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n, size_t l>
void matmul(
    array< array< T, n >, m >   &A,
    array< array< T, l >, n >   &B,
    array< array< T, l >, m >   &C
) {

// ========================================================================== //
// template <class T, size_t m, size_t n, size_t l>                           //
// void matmul(                                                               //
//     array< array< T, n >, m >   &A,                                        //
//     array< array< T, n >, l >   &B,                                        //
//     array< array< T, l >, m >   &C)                                        //
//                                                                            //
// Perform row-column product between matrices A and B.                       //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array < T, n >, m >, 1st input matrix                    //
// - B      : array< array < T, l >, n >, 2nd input matrix                    //
// - C      : array< array < T, l >, m >, with product between A and B        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLE DECLARATION                                                       //
// ========================================================================== //

// Local variables
// none

// Counters
int          i, j, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //

// 1st matrix
if (m == 0) {
    return;
}
if (n == 0) {
    return;
}

// 2nd matrix
if (l == 0) {
    return;
}

// ========================================================================== //
// PERFORM PRODUCT                                                            //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j < l; j++) {
        C[i][j] = (T) 0.0;
        for (k = 0; k < n; k++) {
            C[i][j] += A[i][k] * B[k][j];
        } //next k
    } //next j
} //next i

return; };


// Matrix manipulation ====================================================== //

// -------------------------------------------------------------------------- //
template <class T>
void transpose(
    vector< vector< T > >       &A,
    vector< vector< T > >       &B
) {

// ========================================================================== //
// template <class T>                                                         //
// void transpose(                                                            //
//     vector< vector< T > >       &A,                                        //
//     vector< vector< T > >       &B)                                        //
//                                                                            //
// Matrix transposition.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A       : vector< vector< T > >, with input matrix                       //
// - B       : vector< vector< T > >, with matrix transpose                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int            m, n;

// Counters
int            i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return; }
n = A[0].size();
if (n == 0) { return; }

// ========================================================================== //
// MATRIX TRANSPOSITION                                                       //
// ========================================================================== //

// Resize output variables
B.resize(n);
for (i = 0; i < n; ++i) {
    B[i].resize(m, (T) 0.0);
} //next i

// Transposition
for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
        B[j][i] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void transpose(
    array< array< T, n >, m >   &A,
    array< array< T, m >, n >   &B
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void transpose(                                                            //
//     array< array< T, n >, m >   &A,                                        //
//     array< array< T, m >, n >   &B)                                        //
//                                                                            //
// Matrix transposition.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A       : array< array< T, n >, m >, with input matrix                   //
// - B       : array< array< T, m >, n >, with matrix transpose               //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int            i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return; }
if (n == 0) { return; }

// ========================================================================== //
// MATRIX TRANSPOSITION                                                       //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
        B[j][i] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
vector< vector< T > > transpose(
    vector< vector< T > >       &A
) {

// ========================================================================== //
// template <class T>                                                         //
// void transpose(                                                            //
//     vector< vector< T > >       &A)                                        //
//                                                                            //
// Matrix transposition.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A       : vector< vector< T > >, with input matrix                       //
// - B       : vector< vector< T > >, with matrix transpose                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int                        m = A.size(); 
int                        n(0);

// Counters
int            i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m != 0) n = A[0].size() ;

// ========================================================================== //
// MATRIX TRANSPOSITION                                                       //
// ========================================================================== //

vector< vector< T > >      B( n, vector<T> (m,0.) ) ;

// Transposition
for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
        B[j][i] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
array< array< T, m >, n > transpose(
    array< array< T, n >, m >   &A
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void transpose(                                                            //
//     array< array< T, n >, m >   &A                                        //
//                                                                            //
// Matrix transposition.                                                      //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A       : array< array< T, n >, m >, with input matrix                   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
array< array< T, m >, n >  B ;

// Counters
int            i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
// ========================================================================== //
// MATRIX TRANSPOSITION                                                       //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
        B[j][i] = A[i][j];
    } //next j
} //next i

return B; };


// -------------------------------------------------------------------------- //
template <class T>
void complement(
    int                          i,
    int                          j,
    vector< vector< T > >       &A,
    vector< vector< T > >       &B
) {

// ========================================================================== //
// template <class T>                                                         //
// void complement(                                                           //
//     int                          i,                                        //
//     int                          j,                                        //
//     vector< vector< T > >       &A,                                        //
//     vector< vector< T > >       &B)                                        //
//                                                                            //
// Extract the matrix complement of A.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j    : int, complement index                                          //
// - A       : vector< vector< T > >, with input matrix                       //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - B       : vector< vector< T > >, (i,j) complement of A                   //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int            m, n;

// Counters
int            l, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return; }
n = A[0].size();
if (n == 0) { return; }
i--; j--;
if ((i >= m) || (i < 0)) {
    return;
}
if ((j >= n) || (j < 0)) {
    return;
}

// ========================================================================== //
// EXTRACT COMPLEMENT                                                         //
// ========================================================================== //

// Resize output variables
B.resize(m-1);
for (i = 0; i < m-1; ++i) {
    B[i].resize(n-1, 0.0);
} //next i

// Extract complement
for (l = 0; l < i; l++) {
    for (k = 0; k < j; k++) {
        B[l][k] = A[l][k];
    } //next k
    for (k = j+1; k < n; k++) {
        B[l][k-1] = A[l][k];
    } //next k
} //next l
for (l = i+1; l < m; l++) {
    for (k = 0; k < j; k++) {
        B[l-1][k] = A[l][k];
    } //next k
    for (k = j+1; k < n; k++) {
        B[l-1][k-1] = A[l][k];
    } //next k
} //next l

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void complement(
    int                          i,
    int                          j,
    array< array< T, n >, m >   &A,
    array< array<T, n-1>, m-1>  &B
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void complement(                                                           //
//     int                          i,                                        //
//     int                          j,                                        //
//     array< array< T, n >, m >   &A,                                        //
//     array< array<T, n-1>, m-1>  &B)                                        //
//                                                                            //
// Extract the matrix complement of A.                                        //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - i, j    : int, complement index                                          //
// - A       : array< array< T, n >, m >, with input matrix                   //
// - B       : array< array< T, n-1 >, m-1 >, (i,j) complement of A           ///
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int            l, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return; }
if (n == 0) { return; }
i--; j--;
if ((i >= m) || (i < 0)) {
    return;
}
if ((j >= n) || (j < 0)) {
    return;
}

// ========================================================================== //
// EXTRACT COMPLEMENT                                                         //
// ========================================================================== //
for (l = 0; l < i; l++) {
    for (k = 0; k < j; k++) {
        B[l][k] = A[l][k];
    } //next k
    for (k = j+1; k < n; k++) {
        B[l][k-1] = A[l][k];
    } //next k
} //next l
for (l = i+1; l < m; l++) {
    for (k = 0; k < j; k++) {
        B[l-1][k] = A[l][k];
    } //next k
    for (k = j+1; k < n; k++) {
        B[l-1][k-1] = A[l][k];
    } //next k
} //next l

return; };

// -------------------------------------------------------------------------- //
template <class T>
void triL(
    vector< vector< T > >       &A,
    vector< vector< T > >       &L
) {

// ========================================================================== //
// template <class T>                                                         //
// void triL(                                                                 //
//     vector< vector< T > >       &A,                                        //
//     vector< vector< T > >       &L)                                        //
//                                                                            //
// Extract the lower triangular part of a matrix.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector< T > >, input matrix                             //
// - L      : vector< vector< T > >, lower triangular part of matrix A        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int        m, n;

// Counters
int        i, j;

// ========================================================================== //
// CHECK INPUT COHERENCY                                                      //
// ========================================================================== //
m = A.size();
if (m == 0) { return; };
n = A[0].size();

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
zeros(L, m, n);

// ========================================================================== //
// EXTRACT THE LOWER TRIANGULAR PART OF A                                     //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j <= i; j++) {
        L[i][j] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void triL(
    array< array< T, n >, m >       &A,
    array< array< T, n >, m >       &L
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void triL(                                                                 //
//     array< array< T, n >, m >       &A,                                    //
//     array< array< T, n >, m >       &L)                                    //
//                                                                            //
// Extract the lower triangular part of a matrix.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array< T, n >, m >, input matrix                         //
// - L      : array< array< T, n >, m >, lower triangular part of matrix A    //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int        i, j;

// ========================================================================== //
// CHECK INPUT COHERENCY                                                      //
// ========================================================================== //
if (m == 0) { return; };

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
zeros(L);

// ========================================================================== //
// EXTRACT THE LOWER TRIANGULAR PART OF A                                     //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = 0; j <= i; j++) {
        L[i][j] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T>
void triU(
    vector< vector< T > >           &A,
    vector< vector< T > >           &U
) {

// ========================================================================== //
// template <class T>                                                         //
// void triU(                                                                 //
//     vector< vector< T > >           &A,                                    //
//     vector< vector< T > >           &U)                                    //
//                                                                            //
// Extract the upper triangular part of a matrix.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : vector< vector< T > >, input matrix                             //
// - U      : vector< vector< T > >, upper triangular part of matrix A        //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int        m, n;

// Counters
int        i, j;

// ========================================================================== //
// CHECK INPUT COHERENCY                                                      //
// ========================================================================== //
m = A.size();
if (m == 0) { return; };
n = A[0].size();

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
zeros(U, m, n);

// ========================================================================== //
// EXTRACT THE LOWER TRIANGULAR PART OF A                                     //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = i; j < n; j++) {
        U[i][j] = A[i][j];
    } //next j
} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void triU(
    array< array< T, n >, m >       &A,
    array< array< T, n >, m >       &U
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void triU(                                                                 //
//     array< array< T, n >, m >       &A,                                    //
//     array< array< T, n >, m >       &U)                                    //
//                                                                            //
// Extract the upper triangular part of a matrix.                             //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A      : array< array< T, n >, m >, input matrix                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - U      : array< array< T, n >, m >, upper triangular part of matrix A    //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
// none

// Counters
int        i, j;

// ========================================================================== //
// CHECK INPUT COHERENCY                                                      //
// ========================================================================== //
if (m == 0) { return; };

// ========================================================================== //
// RESIZE OUTPUT VARIABLES                                                    //
// ========================================================================== //
zeros(U);

// ========================================================================== //
// EXTRACT THE LOWER TRIANGULAR PART OF A                                     //
// ========================================================================== //
for (i = 0; i < m; i++) {
    for (j = i; j < n; j++) {
        U[i][j] = A[i][j];
    } //next j
} //next i

return; };

// Matrix determinant ======================================================= //

// -------------------------------------------------------------------------- //
template <class T>
T det(
    vector< vector < T > >          &A
) {

// ========================================================================== //
// template <class T>                                                         //
// T det(                                                                     //
//     vector< vector < T > > &A)                                             //
//                                                                            //
// Compute matrix determinant.                                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A         : vector< vector < T > >, input matrix                         //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - d         : double, matrix determinant                                   //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int                     m, n;
T                       d = (T) 1.0e+18;
vector< vector < T > >  C;

// Counters
int                     i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return(d); };
n = A[0].size();
if (n == 0) { return(d); };
if (m != n) {
    return(d);
}

// ========================================================================== //
// COMPUTE DETERMINANT                                                        //
// ========================================================================== //
if (m == 1) {
    d = A[0][0];
}
else if (m == 2) {
    d = A[0][0]*A[1][1] - A[0][1]*A[1][0];
}
else if (m == 3) {
    d = A[0][0]*A[1][1]*A[2][2] - A[0][0]*A[1][2]*A[2][1]
        + A[0][1]*A[1][2]*A[2][0] - A[0][1]*A[1][0]*A[2][2]
        + A[0][2]*A[1][0]*A[2][1] - A[0][2]*A[1][1]*A[2][0];
}
else {
    d = (T) 0.0;
    for (i = 0; i < m; i++) {
        complement(1, i+1, A, C);
        d += pow(-1.0, i+2) * A[0][i] * det(C);
    } //next i
}

return(d); };

// -------------------------------------------------------------------------- //
template <class T>
T det(
    array< array < T, 1 >, 1 >      &A
) {

// ========================================================================== //
// template <class T>                                                         //
// T det(                                                                     //
//     array< array < T, 1 >, 1 >      &A)                                    //
//                                                                            //
// Dummy function for self-recursive template of det function                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A         : array< array < T, 1 >, 1 >, input matrix                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - d         : double, matrix determinant                                   //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
T                       d = (T) 0.0;

return(A[0][0]); };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
T det(
    array< array < T, n >, m >      &A
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// T det(                                                                     //
//     array< array < T, n >, m >      &A)                                    //
//                                                                            //
// Compute matrix determinant.                                                //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A         : array< array < T, n >, m >, input matrix                     //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - d         : double, matrix determinant                                   //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
T                       d = (T) 0.0;

// Counters
int                     i;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return(d); };
if (n == 0) { return(d); };
if (m != n) {
    return(d);
}

// ========================================================================== //
// COMPUTE DETERMINANT                                                        //
// ========================================================================== //
if (m == 1) {
    d = A[0][0];
}
else if (m == 2) {
    d = A[0][0]*A[1][1] - A[0][1]*A[1][0];
}
else if (m == 3) {
    d = A[0][0]*A[1][1]*A[2][2] - A[0][0]*A[1][2]*A[2][1]
        + A[0][1]*A[1][2]*A[2][0] - A[0][1]*A[1][0]*A[2][2]
        + A[0][2]*A[1][0]*A[2][1] - A[0][2]*A[1][1]*A[2][0];
}
else {
    array< array < double, m-1 >, m-1 >     C;
    for (i = 0; i < m; i++) {
        complement(1, i+1, A, C);
        d += pow(-1.0, i+2) * A[0][i] * det(C);
    } //next i
}

return(d); };

// Linear system ============================================================ //

// -------------------------------------------------------------------------- //
template <class T>
void Cramer(
    vector< vector < T > >          &A,
    vector< T >                     &B,
    vector< T >                     &x
) {

// ========================================================================== //
// void Cramer(                                                               //
//     vector< vector < T > >          &A,                                    //
//     vector< T >                     &B,                                    //
//     vector< T >                     &x)                                    //
//                                                                            //
// Solve linear system using Cramer's rule.                                   //
// (Reccomanded for small-size linear sys.)                                   //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A     : vector< vector< T > >, linear system coeff. matrix               //
// - B     : vector< T >, known term.                                         //
// - x     : vector< T >, linear system solution                              //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
int                    l, m, n;
T                      dA;
vector< vector < T > > C;

// Counters
int                    i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
m = A.size();
if (m == 0) { return; }
n = A[0].size();
if (n == 0) { return; }
if (m != n) {
    return;
}
l = B.size();
if (l == 0) { return; }
if (l != m) {
    return;
}

// =================================================================================== //
// SOLVE LINEAR SYSTEM                                                                 //
// =================================================================================== //

// Solvability condition
dA = det(A);
if (dA < 1.0e-14) {
    return;
}

// Solve linear system
x.resize(n, (T) 0.0);
for (i = 0; i < m; i++) {

    // Build B
    C = A;
    for (j = 0; j < m; j++) {
        C[j][i] = B[j];
    } //next j
    x[i] = det(C)/dA;

} //next i

return; };

// -------------------------------------------------------------------------- //
template <class T, size_t m, size_t n>
void Cramer(
    array< array < T, n >, m >      &A,
    array< T, m >                   &B,
    array< T, n >                   &x
) {

// ========================================================================== //
// template <class T, size_t m, size_t n>                                     //
// void Cramer(                                                               //
//     array< array < T, n >, m >      &A,                                    //
//     array< T, m >                   &B,                                    //
//     array< T, n >                   &x)                                    //
//                                                                            //
// Solve linear system using Cramer's rule.                                   //
// (Reccomanded for small-size linear sys.)                                   //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A     : array< array< T, n >, m >, linear system coeff. matrix           //
// - B     : array< T, m >, known term.                                       //
// - x     : array< T, n >, linear system solution                            //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
T                           dA;
array< array < T, n >, m >  C;

// Counters
int                         i, j;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return; }
if (n == 0) { return; }
if (m != n) {
    return;
}

// ========================================================================== //
// SOLVE LINEAR SYSTEM                                                        //
// ========================================================================== //

// Solvability condition
dA = det(A);
if (dA < 1.0e-14) {
    return;
}

// Solve linear system
for (i = 0; i < m; i++) {

    // Build B
    C = A;
    for (j = 0; j < m; j++) {
        C[j][i] = B[j];
    } //next j
    x[i] = det(C)/dA;

} //next i

return; };

// -------------------------------------------------------------------------- //
template<size_t m>
unsigned int LU(
    array< array < double, m >, m > &A,
    array< array < double, m >, m > &L,
    array< array < double, m >, m > &U,
    array< array < double, m >, m > *P
) {

// ========================================================================== //
// template<size_t m>                                                         //
// unsigned int LU(                                                           //
//     array< array < double, m >, m > &A,                                    //
//     array< array < double, m >, m > &L,                                    //
//     array< array < double, m >, m > &U,                                    //
//     array< array < double, m >, m > *P)                                    //
//                                                                            //
// Compute the LU factorization of a given matrix.                            //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A         : array<array<double, n>, m>, coeff. matrix                    //
// - L, U      : array<array<double, n>, m>, LU factorization                 //
// - P         : (optional) array<array<double, n>, m>*, permutation matrix   //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - info      : int, info flag.                                              //
//               info = 0   --->  no errors encounterd                        //
//               info = 1   --->  matrix is ill-conditioned                   //
//               info = 2   --->  matrix is singular to working precision     //
//               info = 3   --->  input data are not coherent                 //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Parameters
double            toll_pivot = 1.0e-8;

// Local variables
int                             info = 0;
int                             pivot_row;
double                          sum, pivot, pivot_trial;
array<array<double, m>, m>      AA;

// Counter
int                             i, j, k;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return(3); };

// ========================================================================== //
// RESIZE INPUT VARIABLES                                                     //
// ========================================================================== //

// LU matrices
zeros(L);
zeros(U);

// Backup copy of coeffs. matrix
AA = A;

// Pivoting array
eye(*P);

// ========================================================================== //
// COMPUTE LU FACTORIZATION                                                   //
// ========================================================================== //
for (k = 0; k < m; k++) {
    L[k][k] = 1.0;

    // Pivoting ------------------------------------------------------------- //
    pivot_row = k;
    pivot = abs(AA[k][k]);
    for (i = k+1; i < m; i++) {
        pivot_trial = abs(AA[i][k]);
        if (pivot_trial > pivot) {
            pivot = pivot_trial;
            pivot_row = i;
        }
    } //next i

    // Perform rows permutation --------------------------------------------- //
    if (pivot_row == k) {
        if (pivot < 1.0e-14) {
            info = 2;
            return(info);
        }
        else if ((pivot >= 1.0e-14) && (pivot < toll_pivot)) {
            info = 1;
        }
    }
    else {
        swap(AA[k], AA[pivot_row]);
        if (P != NULL) {
            swap((*P)[k], (*P)[pivot_row]);
        }
    }

    // Gauss elimination ---------------------------------------------------- //
    for (i = k+1; i < m; i++) {
        L[i][k] = AA[i][k]/AA[k][k] ;
        for (j = k+1; j < m; j++) {
            AA[i][j] = AA[i][j] - L[i][k]*AA[k][j];
        } //next j

    } //next i
    for (j = k; j < m; j++) {
        U[k][j] = AA[k][j];
    } //next j
} //next k

return(info); };

// -------------------------------------------------------------------------- //
template<size_t m>
void BackwardSubst(
    array< array < double, m >, m > &A,
    array< double, m >              &B,
    array< double, m >              &x
) {

// ========================================================================== //
// template<size_t m>                                                         //
// void BackwardSubst(                                                        //
//     array< array < double, m >, m > &A,                                    //
//     array< double, m >              &B,                                    //
//     array< double, m >              &x)                                    //
//                                                                            //
// Backward substitution method. Solve a linear system Ax = b with upper      //
// triangular coeffs. matrix.                                                 //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A     : array< array< double, m >, m >, coeff.s matrix                   //
// - B     : array< double, m >, source term                                  //
// - x     : array< double, m >, solution of the linear system                //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
double sum, d;

// Counter
int    i, p;

// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return; };

// ========================================================================== //
// CHECK SOLVABILITY CONDITION                                                //
// ========================================================================== //
d = 1.0;
for (i = 0; i < m; i++) {
    d = d*A[i][i];
} //next i
if (abs(d) < 1.0e-14) {
    return;
}

// ========================================================================== //
// SOLVE LINEAR SYSTEM WITH BACKWARD SUBSTITUTION                             //
// ========================================================================== //
for (i = m-1; i >= 0; i--) {
    sum = 0.0;
    for(p = m-1; p > i; p--) {
        sum += A[i][p]*x[p];
    } //next p
    x[i] = (B[i] - sum)/A[i][i];
} //next i

return; };

// -------------------------------------------------------------------------- //
template<size_t m>
void ForwardSubst(
    array< array < double, m >, m > &A,
    array< double, m >              &B,
    array< double, m >              &x
) {

// ========================================================================== //
// template<size_t m>                                                         //
// void ForwardSubst(                                                         //
//     array< array < double, m >, m > &A,                                    //
//     array< double, m >              &B,                                    //
//     array< double, m >              &x)                                    //
//                                                                            //
// Forward substitution method. Solve a linear system Ax = B with lower       //
// triangular coeffs.                                                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A     : array< array< double, m >, m >, coeff.s matrix                   //
// - B     : array< double, m >, source term                                  //
// - x     : array< double, m >, solution of the linear system                //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - none                                                                     //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
double     d, sum;

// Counters
int        i, p;


// ========================================================================== //
// CHECK INPUT                                                                //
// ========================================================================== //
if (m == 0) { return; };

// ========================================================================== //
// CHECK SOLVABILITY CONDITION                                                //
// ========================================================================== //
d = 1.0;
for (i = 0; i < m; i++) {
    d = d*A[i][i];
} //next i
if (abs(d) < 1.0e-14) {
    return;
}

// ========================================================================== //
// FORWARD SUBSTITUTION                                                       //
// ========================================================================== //
for(i = 0; i < m; i++) {
    sum = 0.0;
    for(p = 0; p < i; p++) {
        sum += A[i][p] * x[p];
    } //next p
    x[i] = (B[i] - sum)/A[i][i];
} //next i

return; };

// -------------------------------------------------------------------------- //
template<size_t m>
void SolveLU(
    array< array< double, m >, m >  &A,
    array< double, m >              &B,
    array< double, m >              &x
) {

// ========================================================================== //
// template<size_t m>                                                         //
// void SolveLU(                                                              //
//     array< array< double, m >, m >  &A,                                    //
//     array< double, m >              &B,                                    //
//     array< double, m >              &x)                                    //
//                                                                            //
// Solve liner system Ax = B, using LU factorization.                         //
// ========================================================================== //
// INPUT                                                                      //
// ========================================================================== //
// - A        : array<array<double, m>, m>, coeffs. matrix                    //
// - B        : array<double, m>, source term                                 //
// ========================================================================== //
// OUTPUT                                                                     //
// ========================================================================== //
// - x        : array<double, m>, solution to the linear system               //
// ========================================================================== //

// ========================================================================== //
// VARIABLES DECLARATION                                                      //
// ========================================================================== //

// Local variables
unsigned int                info;
array<array<double, m>, m>  L, U, P, *P_ = &P;
array<double, m>            z, C;

// Counters
// none

// ========================================================================== //
// COMPUTE LU FACTORIZATION                                                   //
// ========================================================================== //
info = LU(A, L, U, P_);
if ((info == 2) || (info == 3)) {
    return;
}
matmul(P, B, C);

// ========================================================================== //
//  SOLVE THE LINEAR SYSTEM                                                   //
// ========================================================================== //

// Forward substitution
ForwardSubst(L, C, z);

// Bacward substitution
BackwardSubst(U, z, x);

return; };

